/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    release-after-ms = <750>;
    quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

#define DVORAK 0
#define NAV_NUM 1
#define BANG 2
#define NAV_L 3
#define FUN_L 4

#define MY_PSCRN LS(LC(PSCRN))
#define MY_COPY LC(INSERT)
#define MY_PASTE LS(INSERT)
#define VI_U LC(Z)
#define VI_W LC(RIGHT)
#define VI_B LC(LEFT)

/ {
    combos {
        compatible = "zmk,combos";

    // shortcut
    #define COMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
          combo_##NAME { \
            timeout-ms = <TIMEOUT>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
          };

        /*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────╮ 30  31  32 │ │ 33  34  35 ╭───────╯
                  ╰────────────╯ ╰────────────╯        */

        COMBO(caps_word_right, &caps_word, 26 27, 60)
        COMBO(caps_word_left, &caps_word, 22 23, 60)

        COMBO(colon, &kp COLON, 7 8, 60)
        COMBO(semicolon, &kp SEMI, 27 28, 60)
        COMBO(slash, &kp FSLH, 1 2, 60)

        COMBO(minus, &kp MINUS, 31 32, 100)
        COMBO(underscore, &kp UNDER, 33 34, 100)

        COMBO(equal, &kp EQUAL, 12 23, 100)
        COMBO(enter, &kp ENTER, 17 26, 60)

        COMBO(reset_left, &bootloader, 0 1 2 3, 100)
        // COMBO(reset_right, &bootloader, 6 7 8 9, 100)
    };

    behaviors {
        lhm: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35>;
        };

        rhm: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 16 17 18 19 20 21 22 23 24 30 31 32 33 34 35>;
        };

        base_lt: base_layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BASE_LAYER_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };

    };

	keymap {
		compatible = "zmk,keymap";

        // DVORAK
		dvorak_layer {
			bindings = <
// LR3
&kp SINGLE_QUOTE &kp COMMA &kp PERIOD &kp P
// RR3
&kp Y &kp F &kp G &kp C &kp R &kp L
// LR2
&kp A &kp O &kp E &kp U &kp I
// RR2
&kp D &kp H &kp T &kp N &kp S
// LR1
&kp SEMICOLON &kp Q &kp J &kp K &kp X
// RR1
&kp B &kp M &kp W &kp V &kp Z
// LT
&kp BACKSPACE &lt NAV_NUM F10 &sk LEFT_SHIFT
// RT
&kp ENTER &lt BANG SPC &sk RIGHT_CONTROL
			>;
		};

		nav_num {
			bindings = <
// LR3
&none &kp BACKSPACE &kp SPACE &kp DELETE &kp PAGE_UP
// RR3
&kp COMMA &kp N7 &kp N8 &kp N9 &kp UNDERSCORE 
// LR2
&kp TAB &kp LEFT &kp UP &kp RIGHT &kp ENTER
// RR2
&kp PERIOD &kp N4 &kp N5 &kp N6 &kp N0
// LR1
&kp LC(TAB) &mt LEFT_ALT HOME &kp DOWN &mt LEFT_SHIFT END &kp PAGE_DOWN
// RR1
&kp COLON &mt LEFT_SHIFT N1 &mt LEFT_CONTROL N2 &mt LEFT_ALT N3 &mt RIGHT_GUI MINUS
// Thumbs
&trans &trans &trans &trans &trans &trans
			>;
		};

		bang {
			bindings = <
// LR3
&kp UNDERSCORE &kp MINUS &kp LEFT_BRACE &kp RIGHT_BRACE &kp GREATER_THAN
// RR3
&kp PLUS &kp LS(N7) &kp LS(N8) &kp LS(N9) &kp PIPE 
// LR2
&kp SINGLE_QUOTE &kp DOUBLE_QUOTES &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp ENTER
// RR2
&kp EQUAL &kp LS(N4) &kp LS(N5) &kp LS(N6) &kp SLASH
// LR1
&kp SEMICOLON &mt LEFT_ALT GRAVE &kp LEFT_BRACKET &mt LEFT_CONTROL RIGHT_BRACKET &kp LESS_THAN
// RR1
&kp BACKSLASH &mt LEFT_SHIFT LS(N1) &mt LEFT_CONTROL LS(N2) &mt LEFT_ALT LS(N3) &mt RIGHT_GUI QUESTION
// Thumbs
&trans &trans &trans &trans &trans &trans
			>;
		};

		nav_layer {
			bindings = <
                   &trans       &kp PSCRN     &kp MY_COPY   &kp MY_PSCRN       &kp MY_PASTE       &trans              &kp C_BRI_DEC    &kp C_BRI_INC            &kp VI_U      &bootloader
                   &kp END      &kp C_NEXT    &kp C_PP      &kp C_VOL_UP       &kp DEL            &kp LEFT            &kp DOWN         &kp UP                   &kp RIGHT     &kp HOME
                   &trans       &kp C_PREV    &kp C_MUTE    &kp C_VOL_DN       &kp UNDER          &kp VI_B            &kp PG_DN        &kp PG_UP                &kp VI_W      &trans
				 /*&            &*/           &trans        &trans             &trans             &bt BT_PRV          &bt BT_NXT       &bt BT_CLR /*            &             &*/
			>;
		};

		function_layer {
			bindings = <
                   &trans       &trans        &trans        &trans             &trans             &trans              &trans           &trans                   &trans        &trans
                   &kp F3       &kp F2        &kp F1        &kp F10            &kp F4             &kp F5              &kp F6           &kp F7                   &kp F8        &kp F9
                   &trans       &trans        &trans        &kp F11            &trans             &trans              &kp F12          &trans                   &trans        &trans
				 /*&            &*/           &trans        &trans             &trans             &trans              &trans           &trans /*                &             &*/
			>;
		};
	};
};
